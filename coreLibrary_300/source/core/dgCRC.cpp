/* Copyright (c) <2003-2011> <Julio Jerez, Newton Game Dynamics>
* 
* This software is provided 'as-is', without any express or implied
* warranty. In no event will the authors be held liable for any damages
* arising from the use of this software.
* 
* Permission is granted to anyone to use this software for any purpose,
* including commercial applications, and to alter it and redistribute it
* freely, subject to the following restrictions:
* 
* 1. The origin of this software must not be misrepresented; you must not
* claim that you wrote the original software. If you use this software
* in a product, an acknowledgment in the product documentation would be
* appreciated but is not required.
* 
* 2. Altered source versions must be plainly marked as such, and must not be
* misrepresented as being the original software.
* 
* 3. This notice may not be removed or altered from any source distribution.
*/

#include "dgStdafx.h"
#include "dgCRC.h"
#include "dgList.h"
#include "dgTree.h"
#include "dgDebug.h"
#include "dgRandom.h"

/*
namespace InternalCRC
{
	const dgInt32 STRING_POOL_SIZE =	1024 * 8 - 256;

	static dgUnsigned32 randBits[] = {
		0x00000001, 0x2C11F801, 0xDFD8F60E, 0x6C8FA2B7, 
		0xB573754C, 0x1522DCDD, 0x21615D3A, 0xE1B307F3, 
		0x12AFA158, 0x53D18179, 0x70950126, 0x941702EF, 
		0x756FE824, 0x694801D5, 0x36DF4DD2, 0x63D80FAB, 
		0xB8AE95B0, 0x902439F1, 0x090C6F3E, 0x2B7C6A27, 
		0x8344B5FC, 0x67D3C5CD, 0x22F5516A, 0x2FB00E63, 
		0xFC761508, 0x87B00169, 0x27EBA056, 0x8CC0B85F, 
		0xE33D3ED4, 0x95DA08C5, 0x13E5C802, 0x9DD9E41B, 
		0xD4577F60, 0x3DD6B7E1, 0x096AF46E, 0x1A00CD97, 
		0x4B10E2AC, 0x22EAAABD, 0x683F119A, 0x62D070D3, 
		0xA8D034B8, 0xAA363D59, 0x58CECB86, 0x40F589CF, 
		0x4F630184, 0x38918BB5, 0xB85B8E32, 0x0A6A948B, 
		0x9A099510, 0x402871D1, 0x11E7859E, 0xEE73CD07, 
		0x4142FB5C, 0x39D68BAD, 0x0FE19DCA, 0xE35B2F43, 
		0x75590068, 0x66433549, 0x929182B6, 0x71EC773F, 
		0xBBAC3034, 0xF2BD8AA5, 0x5743A062, 0x5AB120FB, 
		0x5ABFD6C0, 0xDDD867C1, 0xDC3522CE, 0xD0EC6877, 
		0xE106000C, 0xB7C6689D, 0xED3FF5FA, 0xC75749B3, 
		0x126B7818, 0x1A75E939, 0x0546C5E6, 0x8A9C80AF, 
		0x48A3CAE4, 0x756D0595, 0x7060FE92, 0xA594896B, 
		0x12354470, 0x896599B1, 0xDAC6CBFE, 0xCB419FE7, 
		0x9C44F0BC, 0xAFA9418D, 0xB87D1A2A, 0x428BC023, 
		0x33229BC8, 0xC92D5929, 0xB1C19516, 0x0FBCA61F, 
		0xE594D194, 0x716EFC85, 0x0036A8C2, 0xD7BBCDDB, 
		0x16E4DE20, 0xD10F07A1, 0x68CF812E, 0x390A7357, 
		0x8BAACD6C, 0x2C2E167D, 0x3E7C0A5A, 0x167F9293, 
		0x3D596B78, 0x08888519, 0x9994F046, 0x0FC3E78F, 
		0x008A4444, 0x87526F75, 0xB0079EF2, 0x238DEE4B, 
		0xCA09A3D0, 0x4ED3B191, 0xFA42425E, 0x379DE2C7, 
		0x1EA2961C, 0x1FC3E76D, 0x90DFC68A, 0x0279C103, 
		0xF9AAE728, 0xF2666D09, 0xEF13D776, 0x92E944FF, 
		0x364F22F4, 0x37665E65, 0x05D6E122, 0x7131EABB, 
		0x479E9580, 0x98729781, 0x4BD20F8E, 0x1612EE37, 
		0xCB574ACC, 0x5499B45D, 0x360B4EBA, 0x33814B73, 
		0x43720ED8, 0x146610F9, 0x45514AA6, 0x0B23BE6F, 
		0x026E6DA4, 0xD1B9C955, 0x94676F52, 0xCE8EC32B, 
		0x165EB330, 0x2F6AB971, 0x92F1E8BE, 0xC54095A7, 
		0xBEB3EB7C, 0x5C9E7D4D, 0x5921A2EA, 0xB45D31E3, 
		0xB8C9E288, 0x5FE670E9, 0xC02049D6, 0xC42A53DF, 
		0x6F332454, 0x661BB045, 0x2B3C4982, 0xDF4B779B, 
		0xD7C4FCE0, 0x70FB1761, 0xADD4CDEE, 0x47BDD917, 
		0x8C63782C, 0x8181423D, 0xFA05C31A, 0xDD947453, 
		0x6A8D6238, 0x1A068CD9, 0x4413D506, 0x5374054F, 
		0xC5A84704, 0xB41B1335, 0x06986FB2, 0x4CCF080B, 
		0xF80C7290, 0x8622B151, 0x536DBF1E, 0x21E1B887, 
		0xDED0F0DC, 0xB4B1032D, 0x1D5AAF4A, 0xC56E12C3, 
		0x8C578DE8, 0xCBA564C9, 0xA67EEC36, 0x0837D2BF, 
		0x3D98D5B4, 0x1B06F225, 0xFF7EE1E2, 0x3640747B, 
		0x5E301440, 0x53A08741, 0x436FBC4E, 0xC9C333F7, 
		0x2727558C, 0x7F5CC01D, 0xFC83677A, 0xAFF10D33, 
		0x24836598, 0x3161F8B9, 0xDD748F66, 0x5B6CBC2F, 
		0xAD8FD064, 0x89EE4D15, 0xBBB2A012, 0xA086BCEB, 
		0x1BEAE1F0, 0x69F39931, 0x764DC57E, 0x17394B67, 
		0x4D51A63C, 0xF273790D, 0x35A2EBAA, 0x7EE463A3, 
		0xBC2BE948, 0x2B9B48A9, 0x2FC7BE96, 0x5FC9C19F, 
		0x3AD83714, 0x6FA02405, 0xDDB6AA42, 0xE648E15B, 
		0x1DB7DBA0, 0xF55AE721, 0x4D3ADAAE, 0xB3DAFED7, 
		0x5FFAE2EC, 0x96A42DFD, 0xFB9C3BDA, 0x21CF1613, 
		0x0F2C18F8, 0xAE705499, 0x650B79C6, 0x31C5E30F, 
		0x097D09C4, 0xAAAB76F5, 0x34CE0072, 0x27EDE1CB, 
		0xDAD20150, 0xADD57111, 0xC229FBDE, 0x8AFF4E47, 
		0x448E0B9C, 0x5C5DDEED, 0x4612580A, 0x05F82483, 
		0xBC1EF4A8, 0xB1C01C89, 0xF592C0F6, 0x6798207F, 
		0xEC494874, 0x795F45E5, 0xECFBA2A2, 0xBB9CBE3B, 
		0xF567104f, 0x47289407, 0x25683fa6, 0x2fde5836, 
	};

	struct StringPool
	{
		char buff[STRING_POOL_SIZE];

		StringPool ()
		{
		}

		StringPool (const StringPool &arg)
		{
		}
	};
	
	
	dgUnsigned32 DJBHash(const char* const str, dgInt32 len)
	{
		dgUnsigned32 hash = 5381;
		for(dgInt32 i = 0; i < len; i++)
		{
			//hash = ((hash << 5) + hash) + (*str);
			hash = ((hash << 5) + hash) + str[i];
		}

		return (hash & 0x7FFFFFFF);
	}
}	


dgUnsigned32 dgApi dgCRC (const char* const name)
{
	if (!name) {
		return 0;
	}

	dgUnsigned32 crc = 0;
	for (dgInt32 i = 0; name[i]; i ++) {
		char c = name[i];
		dgUnsigned32 val = InternalCRC::randBits[((crc >> 24) ^ c) & 0xff];
		crc = (crc << 8) ^ val;
	}

	dgAssert (0);
	return crc;
}


dgUnsigned32 dgApi dgCRC (const void* const buffer, dgInt32 size, dgUnsigned32 crcAcc)
{
	dgAssert (buffer);
	unsigned char* const ptr = (unsigned char*)buffer;
	for (dgInt32 i = 0; i < size; i ++) {
		dgUnsigned32 c = ptr[i];
		dgUnsigned32 val = InternalCRC::randBits[((crcAcc >> 24) ^ c) & 0xff];
		crcAcc = (crcAcc << 8) ^ val;
	}
	return crcAcc;
}


const char* dgApi dgInverseCRC (dgUnsigned32 crc)
{	
	dgAssert (0);
	return NULL;
}
	

dgUnsigned32 dgApi dgHash (const void* const string, int size)
{
	return InternalCRC::DJBHash ((char*)string, size);
}
*/


static dgUnsigned64 randBits0[] =
{
	7266447313870364031ULL,  4946485549665804864ULL, 16945909448695747420ULL, 16394063075524226720ULL,  
	4873882236456199058ULL, 14877448043947020171ULL,  6740343660852211943ULL, 13857871200353263164ULL,
	5249110015610582907ULL, 10205081126064480383ULL,  1235879089597390050ULL, 17320312680810499042ULL,
	16489141110565194782ULL,  8942268601720066061ULL, 13520575722002588570ULL, 14226945236717732373ULL, 

	9383926873555417063ULL, 15690281668532552105ULL, 11510704754157191257ULL, 15864264574919463609ULL, 
	6489677788245343319ULL,  5112602299894754389ULL, 10828930062652518694ULL, 15942305434158995996ULL,
	15445717675088218264ULL, 4764500002345775851ULL, 14673753115101942098ULL,  236502320419669032ULL, 
	13670483975188204088ULL, 14931360615268175698ULL, 8904234204977263924ULL, 12836915408046564963ULL, 

	12120302420213647524ULL, 15755110976537356441ULL,  5405758943702519480ULL, 10951858968426898805ULL, 
	17251681303478610375ULL,  4144140664012008120ULL, 18286145806977825275ULL, 13075804672185204371ULL, 
	10831805955733617705ULL,  6172975950399619139ULL, 12837097014497293886ULL, 12903857913610213846ULL,
	560691676108914154ULL,    1074659097419704618ULL, 14266121283820281686ULL, 11696403736022963346ULL, 

	13383246710985227247ULL,  7132746073714321322ULL, 10608108217231874211ULL, 9027884570906061560ULL, 
	12893913769120703138ULL, 15675160838921962454ULL,  2511068401785704737ULL, 14483183001716371453ULL, 
	3774730664208216065ULL,  5083371700846102796ULL,  9583498264570933637ULL, 17119870085051257224ULL, 
	5217910858257235075ULL, 10612176809475689857ULL,  1924700483125896976ULL,  7171619684536160599ULL,


	10949279256701751503ULL, 15596196964072664893ULL, 14097948002655599357ULL, 615821766635933047ULL, 
	5636498760852923045ULL, 17618792803942051220ULL, 580805356741162327ULL,   425267967796817241ULL, 
	8381470634608387938ULL, 13212228678420887626ULL, 16993060308636741960ULL, 957923366004347591ULL, 
	6210242862396777185ULL,  1012818702180800310ULL, 15299383925974515757ULL, 17501832009465945633ULL,

	17453794942891241229ULL, 15807805462076484491ULL,  8407189590930420827ULL,   974125122787311712ULL,
	1861591264068118966ULL, 997568339582634050ULL, 18046771844467391493ULL, 17981867688435687790ULL, 
	3809841506498447207ULL,  9460108917638135678ULL, 16172980638639374310ULL,   958022432077424298ULL, 
	4393365126459778813ULL, 13408683141069553686ULL, 13900005529547645957ULL, 15773550354402817866ULL,

	16475327524349230602ULL,  6260298154874769264ULL, 12224576659776460914ULL,  6405294864092763507ULL, 
	7585484664713203306ULL,  5187641382818981381ULL, 12435998400285353380ULL, 13554353441017344755ULL,
	646091557254529188ULL, 11393747116974949255ULL, 16797249248413342857ULL, 15713519023537495495ULL,
	12823504709579858843ULL,  4738086532119935073ULL, 4429068783387643752ULL,  585582692562183870ULL,

	1048280754023674130ULL, 6788940719869959076ULL, 11670856244972073775ULL, 2488756775360218862ULL,
	2061695363573180185ULL,  6884655301895085032ULL, 3566345954323888697ULL, 12784319933059041817ULL,
	4772468691551857254ULL,  6864898938209826895ULL,  7198730565322227090ULL, 2452224231472687253ULL,
	13424792606032445807ULL, 10827695224855383989ULL, 11016608897122070904ULL, 14683280565151378358ULL,

	7077866519618824360ULL, 17487079941198422333ULL, 3956319990205097495ULL,  5804870313319323478ULL,
	8017203611194497730ULL,  3310931575584983808ULL,  5009341981771541845ULL, 11772020174577005930ULL,
	3537640779967351792ULL,  6801855569284252424ULL, 17687268231192623388ULL, 12968358613633237218ULL, 
	1429775571144180123ULL, 10427377732172208413ULL, 12155566091986788996ULL, 16465954421598296115ULL, 

	12710429690464359999ULL, 9547226351541565595ULL, 12156624891403410342ULL,  2985938688676214686ULL,
	18066917785985010959ULL,  5975570403614438776ULL, 11541343163022500560ULL, 11115388652389704592ULL,
	9499328389494710074ULL,  9247163036769651820ULL,  3688303938005101774ULL, 2210483654336887556ULL,
	15458161910089693228ULL,  6558785204455557683ULL,  1288373156735958118ULL, 18433986059948829624ULL,

	3435082195390932486ULL, 16822351800343061990ULL,  3120532877336962310ULL, 16681785111062885568ULL,  
	7835551710041302304ULL, 2612798015018627203ULL, 15083279177152657491ULL, 6591467229462292195ULL,
	10592706450534565444ULL,  7438147750787157163ULL, 323186165595851698ULL, 7444710627467609883ULL,
	8473714411329896576ULL,  2782675857700189492ULL,  3383567662400128329ULL, 3200233909833521327ULL,

	12897601280285604448ULL, 3612068790453735040ULL, 8324209243736219497ULL, 15789570356497723463ULL,
	1083312926512215996ULL,  4797349136059339390ULL, 5556729349871544986ULL, 18266943104929747076ULL,
	1620389818516182276ULL, 172225355691600141ULL,  3034352936522087096ULL,  1266779576738385285ULL,
	3906668377244742888ULL,  6961783143042492788ULL, 17159706887321247572ULL,  4676208075243319061ULL,

	10315634697142985816ULL, 13435140047933251189ULL, 716076639492622016ULL,	13847954035438697558ULL,
	7195811275139178570ULL, 10815312636510328870ULL,  6214164734784158515ULL, 16412194511839921544ULL, 
	3862249798930641332ULL,  1005482699535576005ULL,  4644542796609371301ULL, 17600091057367987283ULL, 
	4209958422564632034ULL, 5419285945389823940ULL, 11453701547564354601ULL,  9951588026679380114ULL,

	7425168333159839689ULL,  8436306210125134906ULL, 11216615872596820107ULL,  3681345096403933680ULL,
	5770016989916553752ULL, 11102855936150871733ULL, 11187980892339693935ULL, 396336430216428875ULL, 
	6384853777489155236ULL,  7551613839184151117ULL, 16527062023276943109ULL, 13429850429024956898ULL,
	9901753960477271766ULL,  9731501992702612259ULL,  5217575797614661659ULL, 10311708346636548706ULL,

	15111747519735330483ULL, 4353415295139137513ULL,  1845293119018433391ULL, 11952006873430493561ULL,
	3531972641585683893ULL, 16852246477648409827ULL,	15956854822143321380ULL, 12314609993579474774ULL,
	16763911684844598963ULL, 16392145690385382634ULL,  1545507136970403756ULL, 17771199061862790062ULL,
	12121348462972638971ULL, 12613068545148305776ULL,   954203144844315208ULL,  1257976447679270605ULL, 

	3664184785462160180ULL,  2747964788443845091ULL, 15895917007470512307ULL, 15552935765724302120ULL,
	16366915862261682626ULL, 8385468783684865323ULL, 10745343827145102946ULL, 2485742734157099909ULL, 
	916246281077683950ULL,	 15214206653637466707ULL, 12895483149474345798ULL,  1079510114301747843ULL,
	10718876134480663664ULL,  1259990987526807294ULL,  8326303777037206221ULL, 14104661172014248293ULL,
};


dgUnsigned64 dCombineCRC (dgUnsigned64 a, dgUnsigned64 b)
{
	return (a << 8) ^ b;
}

// calculate a 32 bit crc of a string
dgUnsigned64 dgCRC (const char* const name, dgUnsigned64 crcAcc)
{
	if (name) {
		const int bitshift = (sizeof (dgUnsigned64)<<3) - 8;
		for (int i = 0; name[i]; i ++) {
			char c = name[i];
			dgUnsigned64 val = randBits0[((crcAcc >> bitshift) ^ c) & 0xff];
			crcAcc = (crcAcc << 8) ^ val;
		}
	}
	return crcAcc;
}


dgUnsigned64 dgCRC (const void* const buffer, int size, dgUnsigned64 crcAcc)
{
	const unsigned char* const ptr = (unsigned char*)buffer;

	const int bitshift = (sizeof (dgUnsigned64)<<3) - 8;
	for (int i = 0; i < size; i ++) {
		char c = ptr[i];
		dgUnsigned64  val = randBits0[((crcAcc >> bitshift) ^ c) & 0xff];
		crcAcc = (crcAcc << 8) ^ val;
	}
	return crcAcc;
}



